// Code generated by "esc -o web_templates/encoded.go -pkg web_templates web_templates"; DO NOT EDIT.

package web_templates

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/web_templates/contacts.html": {
		name:    "contacts.html",
		local:   "web_templates/contacts.html",
		size:    170,
		modtime: 1580234545,
		compressed: `
H4sIAAAAAAAC/0TOQQ7CIBAF0D2n+OEA5QLIyrV3GOloiFPQAqsJdzc0sS5n8n7+V8XKj5QZNpbcKLZq
MYbxXRCFar1YkmaDAQBV7JSfjGWS+fGSgiqWG22MMfxdSnx9emn8S9eNROyBrlzjnt4tlTyt++PgnaSz
g/N6THBdgjnvbwAAAP//FH5rv6oAAAA=
`,
	},

	"/web_templates/crew.html": {
		name:    "crew.html",
		local:   "web_templates/crew.html",
		size:    121,
		modtime: 1580160572,
		compressed: `
H4sIAAAAAAAC/xzMQaoDIQyA4f2cIuQAegHH1du8UxSrqQgxFDNDFyF3L3b98/1m0Og1hADrog+C+5Fu
hspF9cTCF+bDDFaRThB25ZHTmB101RNjUaVL46T5pPUwC/9/7uEtHXOKPDYmadvFm38rkgbu3wAAAP//
dfajHnkAAAA=
`,
	},

	"/web_templates/encoded.go": {
		name:    "encoded.go",
		local:   "web_templates/encoded.go",
		size:    0,
		modtime: 1580240208,
		compressed: `
H4sIAAAAAAAC/wEAAP//AAAAAAAAAAA=
`,
	},

	"/web_templates/inventory.html": {
		name:    "inventory.html",
		local:   "web_templates/inventory.html",
		size:    167,
		modtime: 1580160784,
		compressed: `
H4sIAAAAAAAC/0SOUQrCMBBE/3uKIQdoLxDz5bd3iO0qi9uNNqkgy95dDKifM7xhnhkWurASAuuTtJXt
FdyHuAtmybUeQpYW0gAAZtiyXgkj3HsThZMZxlNeCe6IZynz7bGXRt95XbNI6NSR6rzxvXFR9zj92RQn
4d8H6fIxmHZJg1lP7wAAAP//tj5wFqcAAAA=
`,
	},

	"/web_templates/page.html": {
		name:    "page.html",
		local:   "web_templates/page.html",
		size:    772,
		modtime: 1580160342,
		compressed: `
H4sIAAAAAAAC/5xSTY/TMBA9b37F7JxJ3HKCxY6EloKEQCBtOXBCrj3bTOs4wXa7jaL+d5SPrQrigMjF
mafn956fpu8tPbInwFZvCeF8zuTtuy/36+9fV1Cl2pWZfD5I2zK7kbd5Dp9X67eQ58OYODkqPx1MJ8X0
n93ImpIGU+kQKSn8tn6fv8IL7nVNCo9MT20TEoJpfCKfFD6xTZWydGRD+Ti8APacWLs8Gu1ILYsFij+E
LEUTuE3c+CsthIE3x71/eJjTOvZ7COQUxtQ5ihVRQkhdSwoTnZIwMSJUgR4VivawcWwGSOzZ7GPSIRUj
oSbLWqF2bvL5L92R+Tc9uAT/qI96et2cfx6uhHcXCkIMRmGVUhvvhNA7fSq2TbN1pFuOhWnqEROON1Hs
fh4odGJZvC6W81DU7ItdxFKKSfAfDZ/fs7uu6XcdKabtkZvGdmUmLR/BOB2jwm1gi2UGAHANm8b9WL5E
GEtSWOuwZZ+npr1bLhbt6c18Zfj6HophcW+ksHwczIYDxgJX3sKHwHasT4rZXkwr3ffk7fn8KwAA///V
PHSXBAMAAA==
`,
	},

	"/web_templates/ships.html": {
		name:    "ships.html",
		local:   "web_templates/ships.html",
		size:    683,
		modtime: 1580238869,
		compressed: `
H4sIAAAAAAAC/6SSMWvDMBCF9/yK4zpHXjLaXtLFQzt1L4p0jgWyHKSL0yL034tSu9iBYkonHbz3vXcS
ihE0tcYRYOjMJSCktCuvFpSVIVTI8hTAUstY72L00p0JRLZYU5cSOk9thU8Z3ccomueUsI4RxKvsCVIq
C1mXhTUZJqczWFztQ5Q2Ixhd4SplscBeDY7J5RUAAO7+ST17o6G19DFpj7oa7Pthod317lAfPd3Kojus
lRiBqb9YyQSoPN0QxAv1J/IhP8tPQKHN+Le+xo3kePCfG6Vm9iGIhqlf9c5hb166IBWbwYWNPF5YEcSS
/OeNjoNjqXhrATXZEMRM/FI8jdMxf5fd95SZrwAAAP//rg6AWKsCAAA=
`,
	},

	"/web_templates/transactions.html": {
		name:    "transactions.html",
		local:   "web_templates/transactions.html",
		size:    139,
		modtime: 1580161284,
		compressed: `
H4sIAAAAAAAC/zzMMQrDMAyF4d2nePgAyV5cTz1Dd+GoxSDUYtmT0d2DM2R8P49vThz8qcqIvZEalV5/
ahHuIQ1BETJ7RpIecwCAOdFIv4xtXVZJUvPK25tkMNwf13qxlVb/i4N72qXeAOtx+fuQHO59BgAA//+t
Nx8liwAAAA==
`,
	},

	"/web_templates": {
		name:  "web_templates",
		local: `web_templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"web_templates": {
		_escData["/web_templates/contacts.html"],
		_escData["/web_templates/crew.html"],
		_escData["/web_templates/encoded.go"],
		_escData["/web_templates/inventory.html"],
		_escData["/web_templates/page.html"],
		_escData["/web_templates/ships.html"],
		_escData["/web_templates/transactions.html"],
	},
}
