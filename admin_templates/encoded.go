// Code generated by "esc -o admin_templates/encoded.go -pkg admin_templates admin_templates"; DO NOT EDIT.

package admin_templates

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/admin_templates/chats.html": {
		name:    "chats.html",
		local:   "admin_templates/chats.html",
		size:    411,
		modtime: 1617258298,
		compressed: `
H4sIAAAAAAAC/2SQsW7zIBCAdz/F6QaP5gGMPfzbP7VS0qXbJT7bqIAjOKpUKO9e0dapnTLyfcd9ImcY
eDSeAc8zSUS43SpNMAceO1Q0OOOxf02hTsnZ9vymFfWVTravAAByhkB+YmjKXLnR1nyjH2xGaP7705L8
sCrl1Fbal8ihnqTd6mwjP3r/Fvmj7V/LGZojX+UeodaKvbuL0+MSHDiWeRk6fH46HPEXfgnCV6HABJ4c
d+g4RpoYe61W8jBg/CUJyMeFO4zp5IwgvJNN3OGB/cB+s0Grsr/f9GpVvvVe/BkAAP//iKF5nZsBAAA=
`,
	},

	"/admin_templates/contacts-list.html": {
		name:    "contacts-list.html",
		local:   "admin_templates/contacts-list.html",
		size:    996,
		modtime: 1617261008,
		compressed: `
H4sIAAAAAAAC/6xSPY/UMBDt91eMLJSriHvWCcVewUl8SXcVnS+eJBa2E8VjOLD835E3u0luWU4C4SJF
5s2b9+ZNjKCw1Q6BNYMj2ZB/bbQnBinthIR+wrZiXCqrHau/hKkIwZp981VwWe9EMPUOACBGmKTrEMrc
l/8Io+sYofwoLUJKcOa6mbn4eRpveklvtapiLO9uU7qpD72kzP7nFoUGCZ81vS+GrMs3PbqjNDg9MR5l
3KJvJj2SHhykJPg4IwQ3enGATm3VrxTtMFmwSP2gKvb50/0DW4tHgHZjIKAfI1aM8IkYOGmxYvl7ic11
OaE8QdQqjNWCn6svDPDh0Wpi8E2agBV7p93P0M6xdOg24wTPwrdGBc+BrVavpZ/zuJb+sv5571AeJvwO
Kb18Fa+yS3hTQXmY208LXg/mA3ovO/RXVx8j6BbKO/c4hDWd/ApD+4U/paKj/bYLjcdLeBb8G+45a/b1
gE+0iPk/93GRuZ0t/1ve9+jU38X8KwAA//+2DH6H5AMAAA==
`,
	},

	"/admin_templates/crew-list.html": {
		name:    "crew-list.html",
		local:   "admin_templates/crew-list.html",
		size:    446,
		modtime: 1617256771,
		compressed: `
H4sIAAAAAAAC/4SRQWoDMQxF9zmFyCbtouMLONNFuwmFbtoLiBmlIzLRgK00FKG7F7sQcCHM0v/znhHf
DEY6shBsh0TXp5mzbsF9Ey9zvwEAMIOE8kXQudcgztybQfeOZwJ3eIgIU6LjfhdwPLOEInrmcW/WHV7d
d/1LomsM2EOAaqiWfxDLN4ku6achDzXFtEZrQsk4KC+SG8FnLU6lIFmzZEW9tPxHjf7Au9wwobYHT6hr
zCKKg7a/vZXwpFTYxxhmvk1AMtZVQpnl9v4NAAD//6iJj1q+AQAA
`,
	},

	"/admin_templates/crew-status.html": {
		name:    "crew-status.html",
		local:   "admin_templates/crew-status.html",
		size:    181,
		modtime: 1617049612,
		compressed: `
H4sIAAAAAAAC/zTOsa7CMAyF4T1PYXm42yUPQJqJHSSY2EzjqhEkrVJHgCK/O6rU7uc7+luDwEPMDNgX
fv8vQlIXVDVumEqCxDJOocPL+XpDbwAAnPBHqDBBpsQdbsS3djjx0pc4S5yyqrP7cHMxz1VAvvOK6iNF
2R8JxsJDh5ZCihn9vZa/WtPr2D+dJW+cXWO8aY1zUP0FAAD//xD3BZW1AAAA
`,
	},

	"/admin_templates/encoded.go": {
		name:    "encoded.go",
		local:   "admin_templates/encoded.go",
		size:    0,
		modtime: 1617261013,
		compressed: `
H4sIAAAAAAAC/wEAAP//AAAAAAAAAAA=
`,
	},

	"/admin_templates/inventory-list.html": {
		name:    "inventory-list.html",
		local:   "admin_templates/inventory-list.html",
		size:    843,
		modtime: 1617219416,
		compressed: `
H4sIAAAAAAAC/3ySwU68MBDG7zzFpIe9/bcP8C+Y6F5MjJroyVsXhmUilKa0q2vTdzeFZUFWuTF0pv3m
933eQ4ElKQRG6ojKtub0r6bOshASIaEyWKaMy6IhxbI3ZzbONfX//F1wmSXC1VkCAOA9GKkOCFsIof8j
asq8h+2jbBBCgMVd/PIax4LsDRWp99v7XQgsu0Vp9kgWVXxkZbLAGi3+mH3YtFFfl1fjtO5l7LDLDWlL
rerVcJ0JXtNFPapirrz/6IuyNQ00aKu2SNnz08srmw77BlLaWbAnjSmz+GkZKNlgyuLiy169qGO/NCjP
IzORLBN8PF0Mcb2ioHP7hiyDo6wdpqwi9eXKwbMDqpkeweNmQz2QEDy6ObFIfs1GdIvBdTgmW85+3Bn8
GDy5Ss1fTNdZjjt534cq3pzMqa7S9H4egRCWdC9U12h2Gimv0ESOI78J2HcAAAD//zPrXH5LAwAA
`,
	},

	"/admin_templates/members-list.html": {
		name:    "members-list.html",
		local:   "admin_templates/members-list.html",
		size:    885,
		modtime: 1617256533,
		compressed: `
H4sIAAAAAAAC/7STQYvUQBCF7/MrijrsbdMLHu1EBA8KooKevEhPupIU290J3dWu2uS/S5uZ2UVknDns
JZBUvfcqX1GlgKWBAwF68nuK6dZxEoR13WkDU6ShRWWs54Dd1xxvcvbuZX+vlel2OrtuBwBQCkQTRoKm
6uoX7XgrHcrNB+MJ1hX+MlV9pAdlyZHQK7ZtKc27N+uK3fubuSalfqJQw0Dvo3q01OxHSLGvPimRJLWN
/+1g0CxhRHhgK1OLL+7u8Kl2mKMHTzLNtsVPHz9/QaDQy8+FWvTZCS8miqpdt9aIQXjUbtlhyQJb/8TW
UkD4blymFvNijRBCMJ5anBeKRngOeLnDkcDBgu057cDuFMbejHSuOeW9ZzkFvb6XbBwnpkhPB9R//nx7
1+q4x1KAgv3neq/meTmMPtK1OIV+yFFQn8+F7y2HX3nY7mH8D0Ct6qWcEP4OAAD//1GwEFl1AwAA
`,
	},

	"/admin_templates/page.html": {
		name:    "page.html",
		local:   "admin_templates/page.html",
		size:    772,
		modtime: 1617046902,
		compressed: `
H4sIAAAAAAAC/5xSTY/TMBA9b37F7JxJ3HKCxY6EloKEQCBtOXBCrj3bTOs4wXa7jaL+d5SPrQrigMjF
mafn956fpu8tPbInwFZvCeF8zuTtuy/36+9fV1Cl2pWZfD5I2zK7kbd5Dp9X67eQ58OYODkqPx1MJ8X0
n93ImpIGU+kQKSn8tn6fv8IL7nVNCo9MT20TEoJpfCKfFD6xTZWydGRD+Ti8APacWLs8Gu1ILYsFij+E
LEUTuE3c+CsthIE3x71/eJjTOvZ7COQUxtQ5ihVRQkhdSwoTnZIwMSJUgR4VivawcWwGSOzZ7GPSIRUj
oSbLWqF2bvL5L92R+Tc9uAT/qI96et2cfx6uhHcXCkIMRmGVUhvvhNA7fSq2TbN1pFuOhWnqEROON1Hs
fh4odGJZvC6W81DU7ItdxFKKSfAfDZ/fs7uu6XcdKabtkZvGdmUmLR/BOB2jwm1gi2UGAHANm8b9WL5E
GEtSWOuwZZ+npr1bLhbt6c18Zfj6HophcW+ksHwczIYDxgJX3sKHwHasT4rZXkwr3ffk7fn8KwAA///V
PHSXBAMAAA==
`,
	},

	"/admin_templates/tx-list.html": {
		name:    "tx-list.html",
		local:   "admin_templates/tx-list.html",
		size:    705,
		modtime: 1617137174,
		compressed: `
H4sIAAAAAAAC/4ySu27zMAyF9zwFweHf/ugBKhto0a1Dizbo0I22mFioRAUyVSQw/O5FmluDXNDNNL8j
niNqGMDx3AsD6up/8L3iOE4sQZd5XqEhF71g/VHyv1JiuGs/raF6YpWawPUEAMBqx+S239s6H4sdUD9w
33aZfVNkYY12lwjNdKX3lERTryTutG/Nftbm/8GF1Sa59REbBsgkC4YpjOMtn64eBpjOVtNH7tvsl+qT
wDhao+4q+k6h8E3oNYXgZdFQIGnP0WOInVcWd9vnPOUIkbVLrsKX57cZngL74dbLsijoeskVKq8UQShy
hb/iYX1u/KJeSmw470/4Sf1nbV+a6BXha6Oq8N65S1JrNsGubHe7UWt2D+9wTd8BAAD///yN5wrBAgAA
`,
	},

	"/admin_templates": {
		name:  "admin_templates",
		local: `admin_templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"admin_templates": {
		_escData["/admin_templates/chats.html"],
		_escData["/admin_templates/contacts-list.html"],
		_escData["/admin_templates/crew-list.html"],
		_escData["/admin_templates/crew-status.html"],
		_escData["/admin_templates/encoded.go"],
		_escData["/admin_templates/inventory-list.html"],
		_escData["/admin_templates/members-list.html"],
		_escData["/admin_templates/page.html"],
		_escData["/admin_templates/tx-list.html"],
	},
}
